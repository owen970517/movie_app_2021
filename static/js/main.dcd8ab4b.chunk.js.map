{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","slice","App","state","isLoading","movies","getMovies","a","axiois","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+RA8BeA,MA1Bf,YAA2D,IAA1CC,EAAyC,EAAzCA,KAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAASC,EAAS,EAATA,OAC7C,OACC,sBAAKC,UAAW,QAAhB,UACG,qBAAKC,IAAMH,EAAQI,IAAMN,EAAOA,MAAOA,IACvC,sBAAKI,UAAW,aAAhB,UACI,oBAAIA,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAY,aAAhB,SAA8BL,IAC9B,oBAAIK,UAAY,eAAhB,SACKD,EAAOI,KAAI,SAAAC,GAAK,OAAM,qBAAIJ,UAAW,eAAf,cAAgCI,EAAhC,YAG3B,oBAAGJ,UAAW,gBAAd,UAA+BH,EAAQQ,MAAM,EAAE,KAA/C,gBC2CGC,G,kNA/CbC,MAAQ,CAENC,WAAY,EACZC,OAAS,I,EAIXC,U,sBAAY,8BAAAC,EAAA,sEAIFC,IAAOC,IAAI,4DAJT,gBAEDJ,EAFC,EACHK,KACLA,KAAOL,OAIX,EAAKM,SAAS,CAACN,SAASD,WAAY,IANxB,2C,uDAQb,WACKQ,KAAKN,c,oBAET,WACE,MAA6BM,KAAKT,MAA3BC,EAAP,EAAOA,UAAYC,EAAnB,EAAmBA,OAEnB,OACE,yBAAST,UAAY,YAArB,SACGQ,EACD,qBAAKR,UAAU,SAAf,SACA,sBAAMA,UAAY,cAAlB,0BAGA,qBAAKA,UAAW,SAAhB,SAEIS,EAAON,KAAI,SAAAc,GAAK,OACd,cAAC,EAAD,CAEAC,GAAID,EAAMC,GACVvB,KAAMsB,EAAMtB,KACZC,MAAOqB,EAAMrB,MACbC,QAASoB,EAAMpB,QACfC,OAAQmB,EAAME,mBACdpB,OAASkB,EAAMlB,QANRkB,EAAMC,e,GAjCTE,IAAMC,YCAxBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,a","file":"static/js/main.dcd8ab4b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year , title, summary ,poster , genres}) {\r\n    return (\r\n     <div className =\"movie\">\r\n        <img src ={poster} alt ={title} title={title}/>\r\n        <div className =\"movie_data\">\r\n            <h3 className=\"movie_title\">{title}</h3>\r\n            <h5 className = \"movie_year\">{year}</h5>\r\n            <ul className = \"movie_genres\">\r\n                {genres.map(genre => ( <li className= \"genres_genre\"> {genre} </li>\r\n                ))}\r\n            </ul>\r\n            <p className =\"movie_summary\">{summary.slice(0,140)}...</p>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import React from 'react';\nimport axiois from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n//https://owen970517.github.io/movie_app_2021/ 깃 허브 페이지 \n// Function component는 function 이고 뭔가를 return 하고 화면에 나옴 \n// class component는 react.component로 부터 확장되고 화면에 나옴 \n// react는 자동적으로 너의 class component의 render 메소드를 자동으로 실행 \n\nclass App extends React.Component {\n  state = {\n    //처음 실행하면 로딩 상태\n    isLoading : true,\n    movies : []\n  };\n  //render() 가 호출되고 나서 호출됨 \n  //axios.get 은 완료되기까지 시간이 걸리기 때문에 async() 를 써서 await을 사용\n  getMovies = async() => {\n    const {data :{\n      data: {movies}\n    }\n  } = await axiois.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n  // 로딩중에서 데이터를 가져오고 나면 그 데이터를 보여주고 로딩 상태는 멈춤 \n  this.setState({movies , isLoading : false});\n};\n componentDidMount() {\n      this.getMovies();\n  }\n  render() {\n    const {isLoading , movies} = this.state;\n\n    return (\n      <section className = \"container\">\n        {isLoading ? \n        <div className=\"loader\"> \n        <span className = \"loader_text\">Loading...</span>\n        </div>\n        : (\n        <div className =\"movies\">\n          {\n            movies.map(movie => (\n              <Movie \n              key = {movie.id}\n              id={movie.id} \n              year={movie.year} \n              title={movie.title} \n              summary={movie.summary} \n              poster={movie.medium_cover_image}\n              genres ={movie.genres}/>\n          ))}\n          </div>\n        )}\n    </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n// React는 terminal 창에서 무조건 npm start << 를 먼저하고 콘솔창을 닫지 않아야 한다 \n// index.html 에서  id 가 root인 곳을 찾아서 App.js 에서 작성한 코드를 적용 시킨다 \n// React는 html 파일에 직접 적지 않아도 적용할 수 있다 \n// 여기서 <App/> 을 component 라고 하고 이 컴포넌트가 데이터를 보여준다 \n// react application 은 한 번에 하나의 컴포넌트만 rendering 할 수 있다 \nReactDOM.render(\n    <App />,\n  document.getElementById(\"potato\")\n  \n  );\n"],"sourceRoot":""}